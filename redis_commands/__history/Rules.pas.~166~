unit Rules;

interface

uses
  System.SysUtils,
  System.Classes,
  System.Threading,
  REST.Types,
  Data.DbxHTTPLayer,
  Data.Bind.Components,
  Data.Bind.ObjectScope,
  REST.Client,

  LoadEPTCData,

  Redis.Client,
  Redis.Commons,
  Redis.NetLib.INDY

    ;

type

  TDataModule1 = class(TDataModule)
    RESTClient1: TRESTClient;
    RESTRequest1: TRESTRequest;
    RESTResponse1: TRESTResponse;
    RESTRequest2: TRESTRequest;
    RESTResponse2: TRESTResponse;
  private
    FRedisHost: string;
    FRedisPort: Integer;
    FRedisHostPort: string;
    function GetGoogleAPIKey: string;
    procedure SetGoogleAPIKey(const Value: string);
    procedure SetRedisHostPort(const Value: string);
  public
    function TestRedis(const AHost: string; const APort: Integer): Boolean;
    function GetMap: TStringStream;
    function WhereAreWe: TStringStream;
    function LoadEPTC(const APath: string; ALog: TProcessLine): ITask;
    property GoogleAPIKey: string read GetGoogleAPIKey write SetGoogleAPIKey;
    property RedisHostPort: string read FRedisHostPort write SetRedisHostPort;
    property RedisHost: string read FRedisHost;
    property RedisPort: Integer read FRedisPort;
  end;

var
  DataModule1: TDataModule1;

implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

uses
  Main;

{$R *.dfm}
{ TDataModule1 }

function TDataModule1.GetGoogleAPIKey: string;
begin
  Result := Self.RESTClient1.Params.ParameterByName('key').Value;
end;

function TDataModule1.GetMap: TStringStream;
begin
  Self.RESTRequest1.Execute;

  Result := TStringStream.Create;
  Result.WriteData(Self.RESTResponse1.RawBytes, Self.RESTResponse1.ContentLength);
  Result.Seek(0, 0);
end;

function TDataModule1.LoadEPTC(const APath: string; ALog: TProcessLine): ITask;
var
  maEPTCLoad: TProc;
begin
  maEPTCLoad := procedure
    var
      oLoader: TLoadEPTC;
    begin
      oLoader := TLoadEPTC.Create(APath, ALog);
      try
        oLoader.Work(Self.RedisHost, Self.RedisPort);
      finally
        oLoader.Free;
      end;
    end;

  Result := TTask.Run(maEPTCLoad);
end;

procedure TDataModule1.SetGoogleAPIKey(const Value: string);
begin
  Self.RESTClient1.Params.ParameterByName('key').Value := Value;
end;

procedure TDataModule1.SetRedisHostPort(const Value: string);
var
  slParts: TStringList;
  sHost  : string;
  sPort  : string;
begin
  FRedisHostPort := Value;

    slParts := TStringList.Create;
  try
    slParts.Delimiter       := ':';
    slParts.StrictDelimiter := True;
    slParts.DelimitedText   := Value;

    sHost := slParts[0];
    if slParts.Count > 1 then
    begin
      sPort := slParts[1];
    end else begin
      sPort := '6379';
    end;
  finally
    slParts.Free;
  end;
end;

function TDataModule1.TestRedis(const AHost: string; const APort: Integer): Boolean;
var
  oRedis: IRedisClient;
begin
  try
    oRedis := TRedisClient.Create(AHost, APort);
    oRedis.Connect;

    Result := True;
  except
    on E: Exception do
    begin
      Result := False;
    end;
  end;
end;

function TDataModule1.WhereAreWe: TStringStream;
begin
  Self.RESTRequest2.Execute;

  Result := TStringStream.Create;
  Result.WriteData(Self.RESTResponse2.RawBytes, Self.RESTResponse2.ContentLength);
  Result.Seek(0, 0);
end;

end.
